var utilities = require('utilities');

var Exploit = function (room, flagName) {
    var flag = Game.flags[flagName];
    var roomName = flag.pos.roomName;

    this.sourceRoom = room;

    // Prepare memory
    if (!Memory.exploits) {
        Memory.exploits = {};
    }
    if (!Memory.exploits[roomName]) {
        Memory.exploits[roomName] = {};
    }

    this.memory = Memory.exploits[roomName];

    // Adjust flag color.
    if (flag.color != COLOR_RED) {
        flag.setColor(COLOR_RED);
    }

    // Calculate path into room.
    if (!this.memory.pathToRoom || !this.memory.pathToRoomCalculated || this.memory.pathToRoomCalculated < Game.time - 10000) {
        var startPosition = room.getStorageLocation();
        startPosition = new RoomPosition(startPosition.x, startPosition.y, room.name);
        if (room.storage) {
            startPosition = room.storage.pos;
        }

        var endPosition = new RoomPosition(25, 25, flag.pos.roomName);

        var result = utilities.getPath(startPosition, {pos: endPosition, range: 20});

        if (result) {
            //console.log('found path in', result.ops, 'operations', result.path);

            this.memory.pathToRoom = Room.serializePositionPath(result.path);
            this.memory.pathToRoomCalculated = Game.time;
        }
        else {
            console.log('No path found!');
        }
        return;
    }
};

module.exports = Exploit;
